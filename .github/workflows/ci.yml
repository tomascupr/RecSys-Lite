name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry --version
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev libopenblas-dev
        
    - name: Install dependencies
      run: |
        poetry config virtualenvs.in-project true
        # Try poetry install first
        poetry install || {
          echo "Poetry install failed, trying pip fallback..."
          # Create a virtualenv if poetry failed
          python -m venv .venv
          source .venv/bin/activate
          # Install with pip
          pip install -e .
          pip install pytest mypy ruff black isort pytest-cov
        }
    
    - name: Lint with ruff
      run: |
        poetry run ruff .
    
    - name: Type check with mypy
      run: |
        poetry run mypy --ignore-missing-imports src
    
    - name: Format check with black
      run: |
        poetry run black --check src

    - name: Run tests
      run: |
        poetry run pytest --cov=src tests/

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        tags: recsys-lite:latest
        outputs: type=docker,dest=/tmp/recsys-lite.tar
    
    - name: Check image size
      run: |
        docker load --input /tmp/recsys-lite.tar
        SIZE=$(docker images recsys-lite:latest --format "{{.Size}}")
        echo "Image size: $SIZE"
        # Check if image size is less than 1GB
        if [[ $SIZE == *GB ]]; then
          GB_VALUE=$(echo $SIZE | sed 's/GB//')
          if (( $(echo "$GB_VALUE > 1" | bc -l) )); then
            echo "Image size exceeds 1GB: $SIZE"
            exit 1
          fi
        fi
    
    - name: Generate SBOM with Syft
      uses: anchore/sbom-action@v0
      with:
        image: recsys-lite:latest
        artifact-name: recsys-lite-sbom
        output-file: ./sbom.json